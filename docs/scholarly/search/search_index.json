{"config": {"lang": ["en"], "prebuild_index": false, "separator": "[\\s\\-]+"}, "docs": [{"location": "index.html", "text": "", "title": "Home"}, {"location": "../index.html", "text": "Extending World-Class Music Notation! openLilyLib is an enhancement library for the GNU LilyPond music notation software. It features powerful extension packages and a toolkit with many useful helper functions.", "title": "Home"}, {"location": "../about/howitworks.html", "text": "How It Works \u00b6 The basic approach to using openLilylib involves two steps, loading oll-core and then either using packages or programmatically working with the provided functionality (for examples see the Getting Started section). When oll-core has been loaded other packages and modules can be loaded through openLilyLib's interface and used according to the package author's intentions and documentation. On the other hand, oll-core provides rich functionality (mostly because it is needed for internal use by the package mechanism) that can be used by user code, either directly in documents or for building custom project libraries (which themselves may be wrapped as (private) openLilyLib packages). This functionality includes option handling or logging functions, but also low-level file/path handling routines or tools to simplify the handling of grobs (GRaphical OBjects). Details about this can be found in oll-core 's documentation .", "title": "How It Works"}, {"location": "../about/howitworks.html#how-it-works", "text": "The basic approach to using openLilylib involves two steps, loading oll-core and then either using packages or programmatically working with the provided functionality (for examples see the Getting Started section). When oll-core has been loaded other packages and modules can be loaded through openLilyLib's interface and used according to the package author's intentions and documentation. On the other hand, oll-core provides rich functionality (mostly because it is needed for internal use by the package mechanism) that can be used by user code, either directly in documents or for building custom project libraries (which themselves may be wrapped as (private) openLilyLib packages). This functionality includes option handling or logging functions, but also low-level file/path handling routines or tools to simplify the handling of grobs (GRaphical OBjects). Details about this can be found in oll-core 's documentation .", "title": "How It Works"}, {"location": "../about/lilypond.html", "text": "GNU LilyPond \u00b6 GNU LilyPond is a text based notation program with a strong focus on traditional craftsmanship - and programmatic extensibility. Power and complexity ad-hoc solutions how about having a mechanism to plug in ready-made solutions? => openLilyLib", "title": "LilyPond"}, {"location": "../about/lilypond.html#gnu-lilypond", "text": "GNU LilyPond is a text based notation program with a strong focus on traditional craftsmanship - and programmatic extensibility. Power and complexity ad-hoc solutions how about having a mechanism to plug in ready-made solutions? => openLilyLib", "title": "GNU LilyPond"}, {"location": "../about/openlilylib.html", "text": "openLilyLib \u00b6 openLilyLib is an extension infrastructure for the GNU LilyPond notation software. It provides a mechanism to load external packages extending LilyPond's functionality, but this is actually somewhat misleading as it simplifies the reality. openLilyLib actually serves a two-fold goal: providing ready-to-use functionality enhancements for LilyPond (bundled in packages) \u2013 and an infrastructure providing building blocks to make it easier to create modular and reusable bits of code and functionality in the end-user domain.", "title": "openLilyLib"}, {"location": "../about/openlilylib.html#openlilylib", "text": "openLilyLib is an extension infrastructure for the GNU LilyPond notation software. It provides a mechanism to load external packages extending LilyPond's functionality, but this is actually somewhat misleading as it simplifies the reality. openLilyLib actually serves a two-fold goal: providing ready-to-use functionality enhancements for LilyPond (bundled in packages) \u2013 and an infrastructure providing building blocks to make it easier to create modular and reusable bits of code and functionality in the end-user domain.", "title": "openLilyLib"}, {"location": "../about/packages.html", "text": "Commented list of openLilyLib Packages \u00b6 The following alphabetical list presents all packages that are officially available from openLilyLib's GitHub organization , along with short summaries of the package's purpose. Note that it is possible to wrap arbitrary functionality as an openLilyLib package, so you may equally have your own custom packages, or packages developed by third parties, both of which are of course not listed here. Working Packages \u00b6 These packages are in a working state, although not everyone is necessarily up-to-date. oll-core \u00b6 openLilyLib's core functionality, required for the use of any package. Documentation | GitHub breaks \u00b6 Auxiliary package to store multiple sets of breaks. Used by page-layout and partial-compilation . Documentation | GitHub anaLYsis \u00b6 Adding graphical analysis indicators such as frames, arrows, and (planned) harmonic analysis symbols. Documentation | GitHub bezier \u00b6 Tools for working with bezier curves in LilyPond. Documentation | GitHub edition-engraver \u00b6 Applying tweaks and inserting commands from external files into LilyPond. Documentation | GitHub gridLY \u00b6 Storing and managing music in a \u201cgrid\u201d (or table). Documentation | GitHub ji \u00b6 Visualizing pitches encoded in \u201cjust intonation\u201d. Documentation | GitHub lalily-templates \u00b6 Templating (instruments/score set-up) for LilyPond Documentation | GitHub notation-fonts \u00b6 Simplified access to alternative notation fonts, with default stylesheets adapted for many fonts. Documentation | GitHub oll-misc \u00b6 Various functions, grouped by topic. Documentation | GitHub page-layout \u00b6 Store and choose between sets of line and page breaks. Useful for supporting alternative target formats and for copying from sources. Documentation | GitHub partial-compilation \u00b6 Shorthands for compiling only sections of scores to save compilation time. Documentation | GitHub scholarLY \u00b6 Support scholarly editions with critical annotations, encoding variants, managin sources. Documentation | GitHub snippets \u00b6 Various snippets, only loosely organized. Like the LSR , but includable Documentation | GitHub stylesheets \u00b6 Modular (house) stylesheets. So far only the span module (inspired by CSS spans) is implemented. Documentation | GitHub Experimental Packages \u00b6 The following packages are in experimental state or have just been begun their development life, they are not expected to be actually usable . contemporary \u00b6 grob-tools \u00b6 lilypond-export \u00b6 templates \u00b6", "title": "Package List"}, {"location": "../about/packages.html#commented-list-of-openlilylib-packages", "text": "The following alphabetical list presents all packages that are officially available from openLilyLib's GitHub organization , along with short summaries of the package's purpose. Note that it is possible to wrap arbitrary functionality as an openLilyLib package, so you may equally have your own custom packages, or packages developed by third parties, both of which are of course not listed here.", "title": "Commented list of openLilyLib Packages"}, {"location": "../about/packages.html#working-packages", "text": "These packages are in a working state, although not everyone is necessarily up-to-date.", "title": "Working Packages"}, {"location": "../about/packages.html#oll-core", "text": "openLilyLib's core functionality, required for the use of any package. Documentation | GitHub", "title": "oll-core"}, {"location": "../about/packages.html#breaks", "text": "Auxiliary package to store multiple sets of breaks. Used by page-layout and partial-compilation . Documentation | GitHub", "title": "breaks"}, {"location": "../about/packages.html#analysis", "text": "Adding graphical analysis indicators such as frames, arrows, and (planned) harmonic analysis symbols. Documentation | GitHub", "title": "anaLYsis"}, {"location": "../about/packages.html#bezier", "text": "Tools for working with bezier curves in LilyPond. Documentation | GitHub", "title": "bezier"}, {"location": "../about/packages.html#edition-engraver", "text": "Applying tweaks and inserting commands from external files into LilyPond. Documentation | GitHub", "title": "edition-engraver"}, {"location": "../about/packages.html#gridly", "text": "Storing and managing music in a \u201cgrid\u201d (or table). Documentation | GitHub", "title": "gridLY"}, {"location": "../about/packages.html#ji", "text": "Visualizing pitches encoded in \u201cjust intonation\u201d. Documentation | GitHub", "title": "ji"}, {"location": "../about/packages.html#lalily-templates", "text": "Templating (instruments/score set-up) for LilyPond Documentation | GitHub", "title": "lalily-templates"}, {"location": "../about/packages.html#notation-fonts", "text": "Simplified access to alternative notation fonts, with default stylesheets adapted for many fonts. Documentation | GitHub", "title": "notation-fonts"}, {"location": "../about/packages.html#oll-misc", "text": "Various functions, grouped by topic. Documentation | GitHub", "title": "oll-misc"}, {"location": "../about/packages.html#page-layout", "text": "Store and choose between sets of line and page breaks. Useful for supporting alternative target formats and for copying from sources. Documentation | GitHub", "title": "page-layout"}, {"location": "../about/packages.html#partial-compilation", "text": "Shorthands for compiling only sections of scores to save compilation time. Documentation | GitHub", "title": "partial-compilation"}, {"location": "../about/packages.html#scholarly", "text": "Support scholarly editions with critical annotations, encoding variants, managin sources. Documentation | GitHub", "title": "scholarLY"}, {"location": "../about/packages.html#snippets", "text": "Various snippets, only loosely organized. Like the LSR , but includable Documentation | GitHub", "title": "snippets"}, {"location": "../about/packages.html#stylesheets", "text": "Modular (house) stylesheets. So far only the span module (inspired by CSS spans) is implemented. Documentation | GitHub", "title": "stylesheets"}, {"location": "../about/packages.html#experimental-packages", "text": "The following packages are in experimental state or have just been begun their development life, they are not expected to be actually usable .", "title": "Experimental Packages"}, {"location": "../about/packages.html#contemporary", "text": "", "title": "contemporary"}, {"location": "../about/packages.html#grob-tools", "text": "", "title": "grob-tools"}, {"location": "../about/packages.html#lilypond-export", "text": "", "title": "lilypond-export"}, {"location": "../about/packages.html#templates", "text": "", "title": "templates"}, {"location": "../about/whatsinside.html", "text": "What's Inside \u00b6 openLilyLib includes a number of packages, most of which serve a specific notational or editorial purpose, such as scholarLY (scholarly annotations), page-layout (self-explaining) or the edition-engraver , a tool to separate content from presentation. The following page will give a commented list of all packages included in the \u201cofficial\u201d openLilyLib library. Available package documentation is always accessible through the \u201cPackages\u201d section in the left-hand navigation column. Besides these regular packages targeting engraving tasks there are two (three) special packages, oll-core , oll-misc , and snippets . As the name suggests, oll-core is the core of openLilyLib , providing the nuts and bolts plus numerous low-level functions that can be used as building blocks in programming for LilyPond. oll-misc is a package including numerous small functions, organized by topic but not serving a dedicated overall goal. snippets is its predecessor and currently in transitional state without a definitive goal, being the origin of openLilyLib but rather poorly structured by the fact that contributors have added functions to a more or less random directory structure. Probably this package will eventually be dropped when all included functions have either been moved elsewhere, included into LilyPond itself, or removed altogether.", "title": "What's inside"}, {"location": "../about/whatsinside.html#whats-inside", "text": "openLilyLib includes a number of packages, most of which serve a specific notational or editorial purpose, such as scholarLY (scholarly annotations), page-layout (self-explaining) or the edition-engraver , a tool to separate content from presentation. The following page will give a commented list of all packages included in the \u201cofficial\u201d openLilyLib library. Available package documentation is always accessible through the \u201cPackages\u201d section in the left-hand navigation column. Besides these regular packages targeting engraving tasks there are two (three) special packages, oll-core , oll-misc , and snippets . As the name suggests, oll-core is the core of openLilyLib , providing the nuts and bolts plus numerous low-level functions that can be used as building blocks in programming for LilyPond. oll-misc is a package including numerous small functions, organized by topic but not serving a dedicated overall goal. snippets is its predecessor and currently in transitional state without a definitive goal, being the origin of openLilyLib but rather poorly structured by the fact that contributors have added functions to a more or less random directory structure. Probably this package will eventually be dropped when all included functions have either been moved elsewhere, included into LilyPond itself, or removed altogether.", "title": "What's Inside"}, {"location": "../contribute/cg.html", "text": "Contributor's Guide \u00b6 An openLilyLib Contributor's Guide is not available at this point. Since it will be a rather substantial document it will not be integrated in this part of the website but hosted separately. Please let yourself not be discouraged by the lack of a CG. Rather, get in touch with us, and while getting you up to speed we can work on the documentation. The CG will include the mechanisms of creating, maintaining and publishing openLilyLib packages, as well as writing and creating documentation.", "title": "Contributor's Guide"}, {"location": "../contribute/cg.html#contributors-guide", "text": "An openLilyLib Contributor's Guide is not available at this point. Since it will be a rather substantial document it will not be integrated in this part of the website but hosted separately. Please let yourself not be discouraged by the lack of a CG. Rather, get in touch with us, and while getting you up to speed we can work on the documentation. The CG will include the mechanisms of creating, maintaining and publishing openLilyLib packages, as well as writing and creating documentation.", "title": "Contributor's Guide"}, {"location": "../contribute/contact.html", "text": "Get in Touch \u00b6 We are happy to hear from users, ideally of course success stories ;-) But other users and maintainers of openLilyLib and its packages are happy to help with any issues that may arise with using the infrastructure or specific packages. In any case we prefer users we know over anonymous ones. Depending on the type of question there are several communications channels available. Problems and (Possible) Bugs \u00b6 In case of concrete problems with specific packages that look like possible bugs each package has its own issue tracker in its GitHub repository. This is the best place to report crashes or other strange behaviour, however, it should be clear that reported issues will not be read by many by default. General Questions and Discussion \u00b6 Clearly the best way to get in touch with openLilyLib , i.e. other users and developers, is the lilypond-user mailing list. Any openLilyLib user is by definition a LilyPond user as well, and since it usually isn't clear on first sight whether problems arise from a bug in a specific package, faulty user input with regard to the openLilyLib package, faulty general input, or even a LilyPond bug. Therefore it is usually the best approach to raise any issues on the lilypond-user list and collectively decide what to do with them. Private Contact \u00b6 It is also possible to directly contact a human by email. Packages should have their maintainers listed in a file package.cnf in the root directory of the package, some also list maintainers in the README.md file that is visible on the package's GitHub entry page. Finally the email address info at openlilylib dot org will also address a maintainer. However, in general any form of public communication is preferable, if no specific reasons suggest otherwise.", "title": "Get in Touch"}, {"location": "../contribute/contact.html#get-in-touch", "text": "We are happy to hear from users, ideally of course success stories ;-) But other users and maintainers of openLilyLib and its packages are happy to help with any issues that may arise with using the infrastructure or specific packages. In any case we prefer users we know over anonymous ones. Depending on the type of question there are several communications channels available.", "title": "Get in Touch"}, {"location": "../contribute/contact.html#problems-and-possible-bugs", "text": "In case of concrete problems with specific packages that look like possible bugs each package has its own issue tracker in its GitHub repository. This is the best place to report crashes or other strange behaviour, however, it should be clear that reported issues will not be read by many by default.", "title": "Problems and (Possible) Bugs"}, {"location": "../contribute/contact.html#general-questions-and-discussion", "text": "Clearly the best way to get in touch with openLilyLib , i.e. other users and developers, is the lilypond-user mailing list. Any openLilyLib user is by definition a LilyPond user as well, and since it usually isn't clear on first sight whether problems arise from a bug in a specific package, faulty user input with regard to the openLilyLib package, faulty general input, or even a LilyPond bug. Therefore it is usually the best approach to raise any issues on the lilypond-user list and collectively decide what to do with them.", "title": "General Questions and Discussion"}, {"location": "../contribute/contact.html#private-contact", "text": "It is also possible to directly contact a human by email. Packages should have their maintainers listed in a file package.cnf in the root directory of the package, some also list maintainers in the README.md file that is visible on the package's GitHub entry page. Finally the email address info at openlilylib dot org will also address a maintainer. However, in general any form of public communication is preferable, if no specific reasons suggest otherwise.", "title": "Private Contact"}, {"location": "../contribute/participate.html", "text": "Participate! \u00b6 Although originally started as a single-developer effort openLilyLib has become a community project, and we are always in need of participation \u2013 which can be in arbitrary ways. Use! \u00b6 It may sound silly, but the most obvious way of supporting openLilyLib is using it. More users mean more field testing, more visibility, and consequently more potential developers. In its current form openLilyLib is still a project and environment with rough edges and much polishing and stabilization to be done. Test and Report! \u00b6 Rough edges can only be polished after detection and discussion. If you are experiencing problems don't try to silently get over them, adapt your code or eventually decide to drop the tool, please report any problems, so they can be made fruitful for improving the toolkit. Please also go forward trying out new features or even challenge package developers to enhance their packages. Fix! \u00b6 If you are able to do so, or have learned something during discussion please consider and don't hesitate engaging in a package's code base. Most package maintainers if not all are more than happy receiving Pull Requests. Document! \u00b6 If you are eager helping openLilyLib development but are afraid your coding skills are not up to the task, then please consider joining our effort to produce decent documentation. One of the main reasons (if not the main) that openLilyLib still is sort of a niche product is its dramatic under-documentation. The website you are reading now has been started in February 2020 as a first shot at a coherent and comprehensive documenation strategy for openLilyLib . It features high-level \u201cauthored\u201d manuals that can pretty easily be maintained without touching internal package code. In addition to that we are working an a solution to also integrate API/code documentation with a low-level reference of available commands and functionality. Develop! \u00b6 Finally, don't hesitate joining development efforts yourself. You can equally join development of a specific package (there are a few that can really use additional manpower), or write your own package! If you have an idea for functionality that would lend itself to being wrapped as an openLilyLib package, or if that holds true for existing library code you might get in touch with us and suggest a package. openLilyLib is not a closed system! And even if for whatever reason it is not considered for inclusion in the \u201cofficial\u201d GitHub organization you may at any time publish openLilyLib packages independently. Donate and Commission! \u00b6 If you feel the responsibility to support openLilyLib development but don't have the time or skill-set for any active involvement you may still simply donate some money to acknowledge the volunteer effort spent on the software. Or you may commission package authors to create functionality. We don't put up a \u201cDonate\u201d button here because there is no clear organizational body who could validly accept donations (on behalf of whom?), but if you're really interested in this topic we'll surely find an adequate arrangement.", "title": "Participate"}, {"location": "../contribute/participate.html#participate", "text": "Although originally started as a single-developer effort openLilyLib has become a community project, and we are always in need of participation \u2013 which can be in arbitrary ways.", "title": "Participate!"}, {"location": "../contribute/participate.html#use", "text": "It may sound silly, but the most obvious way of supporting openLilyLib is using it. More users mean more field testing, more visibility, and consequently more potential developers. In its current form openLilyLib is still a project and environment with rough edges and much polishing and stabilization to be done.", "title": "Use!"}, {"location": "../contribute/participate.html#test-and-report", "text": "Rough edges can only be polished after detection and discussion. If you are experiencing problems don't try to silently get over them, adapt your code or eventually decide to drop the tool, please report any problems, so they can be made fruitful for improving the toolkit. Please also go forward trying out new features or even challenge package developers to enhance their packages.", "title": "Test and Report!"}, {"location": "../contribute/participate.html#fix", "text": "If you are able to do so, or have learned something during discussion please consider and don't hesitate engaging in a package's code base. Most package maintainers if not all are more than happy receiving Pull Requests.", "title": "Fix!"}, {"location": "../contribute/participate.html#document", "text": "If you are eager helping openLilyLib development but are afraid your coding skills are not up to the task, then please consider joining our effort to produce decent documentation. One of the main reasons (if not the main) that openLilyLib still is sort of a niche product is its dramatic under-documentation. The website you are reading now has been started in February 2020 as a first shot at a coherent and comprehensive documenation strategy for openLilyLib . It features high-level \u201cauthored\u201d manuals that can pretty easily be maintained without touching internal package code. In addition to that we are working an a solution to also integrate API/code documentation with a low-level reference of available commands and functionality.", "title": "Document!"}, {"location": "../contribute/participate.html#develop", "text": "Finally, don't hesitate joining development efforts yourself. You can equally join development of a specific package (there are a few that can really use additional manpower), or write your own package! If you have an idea for functionality that would lend itself to being wrapped as an openLilyLib package, or if that holds true for existing library code you might get in touch with us and suggest a package. openLilyLib is not a closed system! And even if for whatever reason it is not considered for inclusion in the \u201cofficial\u201d GitHub organization you may at any time publish openLilyLib packages independently.", "title": "Develop!"}, {"location": "../contribute/participate.html#donate-and-commission", "text": "If you feel the responsibility to support openLilyLib development but don't have the time or skill-set for any active involvement you may still simply donate some money to acknowledge the volunteer effort spent on the software. Or you may commission package authors to create functionality. We don't put up a \u201cDonate\u201d button here because there is no clear organizational body who could validly accept donations (on behalf of whom?), but if you're really interested in this topic we'll surely find an adequate arrangement.", "title": "Donate and Commission!"}, {"location": "../getstarted/install.html", "text": "Obtaining and Installing openLilyLib \u00b6 \u201cInstalling\u201d openLilyLib and its packages involves two steps: obtaining a copy of the code and making it available to LilyPond. Obtaining openLilyLib \u00b6 The source code of all desired packages has to be downloaded and stored within an arbitrary \u201croot\u201d directory on the file system, for example (on Unix-like systems) ~/oll-lib . The official openLilyLib packages are hosted in the \u201copenlilylib\u201d GitHub organization , and all repositories within that can be considered openLilyLib packages. Downloading Packages \u00b6 On the repository page of an arbitrary package (the screenshot shows oll-core ) the complete package can be downloaded as a Zip archive and extracted to a subdirectory of the openLilyLib root directory. Cloning With Git \u00b6 The recommended way of obtaining the packages is by cloning them with Git, which makes it much easier to update them, or to contribute with testing and/or development. For this the package's Git URL is also available through the \u201cClone or Download\u201d button shown in the screenshot. Cloning is possible through HTTPS or SSH, depending on your GitHub account (HTTPS doesn't need one). cd ~ mkdir oll-lib git clone https://github.com/openlilylib/oll-core.git Directory Layout \u00b6 As said all packages are stored in subdirectories of a common root. The minimum setup includes the [oll-core}(../oll-core/index.html) package, but usually other packages will be used too. Some packages make use of other packages (i.e. they \u201cdepend\u201d on them), which is expected to be part of the package's documentation. An installation of openLilyLib with the page-layout package (which depends on breaks and edition-engraver ) would therefore look like this: ~/ /oll-lib /oll-core /breaks /edition-engraver /page-layout Making openLilyLib Available \u00b6 In order to be used by LilyPond the downloaded packages have to be made available to LilyPond. This is done by adding the openLilyLib root directory to LilyPond's search path with the -I command line option: lilypond -I ~/oll-lib path/to/file.ly will do that for the current compilation process. In order not to have to add this to every compilation command it is possible to create a wrapper script, which may be a good idea for a variety of use cases anyway. When using Frescobaldi as an editing environment this is not necessary because search paths can be added and persistently stored within Frescobaldi. Using Frescobaldi \u00b6 In the near future (hopefully starting with version 3.2 or 3.3) Frescobaldi will provide support for openLilyLib , including searching for, downloading, and installing openLilyLib , but currently (Feb 2020) this has not been implemented.", "title": "Install openLilyLib"}, {"location": "../getstarted/install.html#obtaining-and-installing-openlilylib", "text": "\u201cInstalling\u201d openLilyLib and its packages involves two steps: obtaining a copy of the code and making it available to LilyPond.", "title": "Obtaining and Installing openLilyLib"}, {"location": "../getstarted/install.html#obtaining-openlilylib", "text": "The source code of all desired packages has to be downloaded and stored within an arbitrary \u201croot\u201d directory on the file system, for example (on Unix-like systems) ~/oll-lib . The official openLilyLib packages are hosted in the \u201copenlilylib\u201d GitHub organization , and all repositories within that can be considered openLilyLib packages.", "title": "Obtaining openLilyLib"}, {"location": "../getstarted/install.html#downloading-packages", "text": "On the repository page of an arbitrary package (the screenshot shows oll-core ) the complete package can be downloaded as a Zip archive and extracted to a subdirectory of the openLilyLib root directory.", "title": "Downloading Packages"}, {"location": "../getstarted/install.html#cloning-with-git", "text": "The recommended way of obtaining the packages is by cloning them with Git, which makes it much easier to update them, or to contribute with testing and/or development. For this the package's Git URL is also available through the \u201cClone or Download\u201d button shown in the screenshot. Cloning is possible through HTTPS or SSH, depending on your GitHub account (HTTPS doesn't need one). cd ~ mkdir oll-lib git clone https://github.com/openlilylib/oll-core.git", "title": "Cloning With Git"}, {"location": "../getstarted/install.html#directory-layout", "text": "As said all packages are stored in subdirectories of a common root. The minimum setup includes the [oll-core}(../oll-core/index.html) package, but usually other packages will be used too. Some packages make use of other packages (i.e. they \u201cdepend\u201d on them), which is expected to be part of the package's documentation. An installation of openLilyLib with the page-layout package (which depends on breaks and edition-engraver ) would therefore look like this: ~/ /oll-lib /oll-core /breaks /edition-engraver /page-layout", "title": "Directory Layout"}, {"location": "../getstarted/install.html#making-openlilylib-available", "text": "In order to be used by LilyPond the downloaded packages have to be made available to LilyPond. This is done by adding the openLilyLib root directory to LilyPond's search path with the -I command line option: lilypond -I ~/oll-lib path/to/file.ly will do that for the current compilation process. In order not to have to add this to every compilation command it is possible to create a wrapper script, which may be a good idea for a variety of use cases anyway. When using Frescobaldi as an editing environment this is not necessary because search paths can be added and persistently stored within Frescobaldi.", "title": "Making openLilyLib Available"}, {"location": "../getstarted/install.html#using-frescobaldi", "text": "In the near future (hopefully starting with version 3.2 or 3.3) Frescobaldi will provide support for openLilyLib , including searching for, downloading, and installing openLilyLib , but currently (Feb 2020) this has not been implemented.", "title": "Using Frescobaldi"}, {"location": "../getstarted/quickstart.html", "text": "Quick Start \u00b6 Any LilyPond document wanting to make use of openLilyLib first has to load oll-core with the invocation \\include \"oll-core/package.ily\" After this various commands for loading packages and submodules are available. They will be explained on the following pages, but for a starter this will load the stylesheets package and the annotate module from the scholarLY package: \\include \"oll-core/package.ily\" \\loadPackage stylesheets \\loadModule scholarly.annotate", "title": "Quick Start"}, {"location": "../getstarted/quickstart.html#quick-start", "text": "Any LilyPond document wanting to make use of openLilyLib first has to load oll-core with the invocation \\include \"oll-core/package.ily\" After this various commands for loading packages and submodules are available. They will be explained on the following pages, but for a starter this will load the stylesheets package and the annotate module from the scholarLY package: \\include \"oll-core/package.ily\" \\loadPackage stylesheets \\loadModule scholarly.annotate", "title": "Quick Start"}, {"location": "../getstarted/usage.html", "text": "General Usage \u00b6 Loading packages with openLilyLib provides more possibilities than shown on the previous page. These will only be introduced generally on this page, while all the details of the available functionality is documented with oll-core . The topics covered below include an introduction to the package/module loading interface and option handling. Loading Packages and Modules \u00b6 Simple Loading of Packages \u00b6 As seen on the previous page there is a command to load a package: \\loadPackage edition-engraver This first checks whether the package is already loaded and only if this is not the case loads the package. Loading a package also silently checks for package dependencies and implicitly loads packages that need to be loaded before. (If a depended-up package is not installed, an error is triggered). Simple Loading of Modules \u00b6 Package may be organized with multiple (also nested) modules , which can be loaded explicitly: \\loadModule scholarly.choice Again, it is checked whether the module needs to be loaded. Additionally, if the package (or any element earlier in the loading path) is not loaded yet, this will be implicitly loaded. The same holds true for dependencies, just as with package loading. Loading with Options \u00b6 The loading commands support the passing of package/module options. Of course these options are dependent on what the packages provide, so there can be no general example. Except for one thing which is generally available: Passing to-be-loaded modules as options: \\loadPackage \\with { modules = choice.annotate } scholarly which would load the scholarLY package with the modules choice and annotate . Options \u00b6 Packages can define configuration options, which can be accessed through the commands \\getOption and \\setOption . Options are addressed using a symbol list as path, which typically starts with the package/module name: \\getOption scholarly.annotate.use-colors \\setOption analysis.frames.border-width 0.5 There are more commands with different kinds of fallback mechanisms or the ability to iterate over child options, but these are not covered here. Also, it is possible to make use of the option handling infrastructure in user documents, defining options with \\registerOption path.to.option <default-value> , which can be a very useful tool and also \u201cabused\u201d for storing data such as music or titles for reuse.", "title": "General Usage"}, {"location": "../getstarted/usage.html#general-usage", "text": "Loading packages with openLilyLib provides more possibilities than shown on the previous page. These will only be introduced generally on this page, while all the details of the available functionality is documented with oll-core . The topics covered below include an introduction to the package/module loading interface and option handling.", "title": "General Usage"}, {"location": "../getstarted/usage.html#loading-packages-and-modules", "text": "", "title": "Loading Packages and Modules"}, {"location": "../getstarted/usage.html#simple-loading-of-packages", "text": "As seen on the previous page there is a command to load a package: \\loadPackage edition-engraver This first checks whether the package is already loaded and only if this is not the case loads the package. Loading a package also silently checks for package dependencies and implicitly loads packages that need to be loaded before. (If a depended-up package is not installed, an error is triggered).", "title": "Simple Loading of Packages"}, {"location": "../getstarted/usage.html#simple-loading-of-modules", "text": "Package may be organized with multiple (also nested) modules , which can be loaded explicitly: \\loadModule scholarly.choice Again, it is checked whether the module needs to be loaded. Additionally, if the package (or any element earlier in the loading path) is not loaded yet, this will be implicitly loaded. The same holds true for dependencies, just as with package loading.", "title": "Simple Loading of Modules"}, {"location": "../getstarted/usage.html#loading-with-options", "text": "The loading commands support the passing of package/module options. Of course these options are dependent on what the packages provide, so there can be no general example. Except for one thing which is generally available: Passing to-be-loaded modules as options: \\loadPackage \\with { modules = choice.annotate } scholarly which would load the scholarLY package with the modules choice and annotate .", "title": "Loading with Options"}, {"location": "../getstarted/usage.html#options", "text": "Packages can define configuration options, which can be accessed through the commands \\getOption and \\setOption . Options are addressed using a symbol list as path, which typically starts with the package/module name: \\getOption scholarly.annotate.use-colors \\setOption analysis.frames.border-width 0.5 There are more commands with different kinds of fallback mechanisms or the ability to iterate over child options, but these are not covered here. Also, it is possible to make use of the option handling infrastructure in user documents, defining options with \\registerOption path.to.option <default-value> , which can be a very useful tool and also \u201cabused\u201d for storing data such as music or titles for reuse.", "title": "Options"}, {"location": "../oll-core/index.html", "text": "", "title": "Home"}]}